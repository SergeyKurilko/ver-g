import asyncio
import os
from telebot.async_telebot import AsyncTeleBot
import locale
from dotenv import load_dotenv
from datetime import datetime, timedelta
import aiohttp
import redis
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardMarkup, KeyboardButton

load_dotenv()

redis_connect = redis.Redis(db=1)

API_TOKEN = os.getenv("VER_G_MESSAGES_BOT")
API_URL_PREFIX = os.getenv("API_URL_PREFIX")
API_URL_FOR_GET_COURSES_QUERY = os.getenv("API_URL_FOR_GET_COURSES_QUERY")
API_URL_FOR_CREATE_PROMO_FOR_COURSE = os.getenv("API_URL_FOR_CREATE_PROMO_FOR_COURSE")
API_URL_FOR_CHECK_PROMO_FOR_COURSE = os.getenv("API_URL_FOR_CHECK_PROMO_FOR_COURSE")
API_URL_FOR_GET_REPORT_EDUCATION_PLATFORM = os.getenv("API_URL_FOR_GET_REPORT_EDUCATION_PLATFORM")
ADMIN_VER_G_CHAT_LINK = os.getenv("ADMIN_VER_G_CHAT_LINK")
API_URL_FOR_DELETE_COMMENT_FOR_ARTICLE = os.getenv("API_URL_FOR_DELETE_COMMENT_FOR_ARTICLE")
# –ß–∞—Ç —Å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è–º–∏ –æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–º–∏ –≤ –±–ª–æ–≥–µ –∏ –≤ —à–∞–≥–∞—Ö
COMMENTS_FROM_VER_G_CHAT_ID = os.getenv("COMMENTS_FROM_VER_G_CHAT_ID")
# –ß–∞—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∞–¥–º–∏–Ω–∫–æ–π –∏ –ë–î
ADMIN_VER_G_CHAT_ID = os.getenv("ADMIN_VER_G_CHAT_ID")
# –û–ø–æ–≤–µ—â–µ–Ω–∏—è –æ–± –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—è—Ö –Ω–∞ ver-g/academy
EDUCATION_PLATFORM_ACTIVITY_CHAT_ID = os.getenv("EDUCATION_PLATFORM_ACTIVITY_CHAT_ID")
# ID –∞–¥–º–∏–Ω–æ–≤, –¥–æ–ø—É—â–µ–Ω–Ω—ã—Ö –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞
ELENA_CHAT_ID = os.getenv("ELENA_CHAT_ID")
SERGEY_CHAT_ID = os.getenv("SERGEY_CHAT_ID")
# API KEY –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è api
API_KEY_VER_G = os.getenv("API_KEY_VER_G")

bot = AsyncTeleBot(API_TOKEN)

def format_data(date_str: str):
    """
    –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç —Å—Ç—Ä–æ–∫—É –≤ –æ–±—ä–µ–∫—Ç datetime.
    –û–±—ä–µ–∫—Ç datetime –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –≤ —Å—Ç—Ä–æ–∫—É –Ω—É–∂–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞ '00 –º–µ—Å—è—Ü 2025'
    """
    locale.setlocale(locale.LC_TIME, 'ru_RU.UTF-8')

    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç—Ä–æ–∫—É –≤ –æ–±—ä–µ–∫—Ç datetime
    date_obj = datetime.strptime(date_str, "%Y-%m-%d")

    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –æ–±—ä–µ–∫—Ç datetime –≤ —Å—Ç—Ä–æ–∫—É –Ω—É–∂–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞
    date_string = datetime.strftime(date_obj, "%d %B %Y")

    return date_string

def create_start_keyboard():
    markup = ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∞–π—Ç–∞" –≤ –ø–µ—Ä–≤—ã–π —Ä—è–¥
    markup.row(KeyboardButton("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∞–π—Ç–∞üìà"))
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ "–°–æ–∑–¥–∞—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥ –∫ –∫—É—Ä—Å—É" –∏ "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥" –≤–æ –≤—Ç–æ—Ä–æ–π —Ä—è–¥
    markup.row(KeyboardButton("–°–æ–∑–¥–∞—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥ –∫ –∫—É—Ä—Å—É üç™"), KeyboardButton("–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥ üîç"))
    return markup


def register_handlers(bot):
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã \start
    @bot.message_handler(commands=["start"])
    async def start_keyboard_sender(message):
        if str(message.from_user.id) in [ELENA_CHAT_ID, SERGEY_CHAT_ID]:
            markup = create_start_keyboard()
            await bot.send_message(message.chat.id, "–ß—Ç–æ –±—É–¥–µ–º –¥–µ–ª–∞—Ç—å —Å–µ–≥–æ–¥–Ω—è?", reply_markup=markup)
        else:
            await bot.send_message(message.chat.id, "–≠—Ç–æ —á–∞—Å—Ç–Ω—ã–π –±–æ—Ç. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –≤–ª–∞–¥–µ–ª—å—Ü—É.")

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã \test
    @bot.message_handler(commands=["test"])
    async def test_command(message):
        if str(message.from_user.id) in [ELENA_CHAT_ID, SERGEY_CHAT_ID]:
            await bot.send_message(message.chat.id, "–Ø —Ç—É—Ç.")
        else:
            await bot.send_message(message.chat.id, "–≠—Ç–æ —á–∞—Å—Ç–Ω—ã–π –±–æ—Ç. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –≤–ª–∞–¥–µ–ª—å—Ü—É.")

    # –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –î–∞–π –∞–π–¥–∏
    @bot.message_handler(func=lambda message: message.text == "–î–∞–π –∞–π–¥–∏")
    async def get_id_handler(message):
        if str(message.from_user.id) in [ELENA_CHAT_ID, SERGEY_CHAT_ID]:
            user_id = message.from_user.id
            await bot.send_message(message.chat.id, f"–¢–≤–æ–π ID: `{user_id}`",
                                   parse_mode='markdown')
        else:
            await bot.send_message(message.chat.id, "–≠—Ç–æ —á–∞—Å—Ç–Ω—ã–π –±–æ—Ç. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –≤–ª–∞–¥–µ–ª—å—Ü—É.")

    # –æ–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ "–°–æ–∑–¥–∞—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥ –∫ –∫—É—Ä—Å—É üç™"
    @bot.message_handler(func=lambda message: message.text == "–°–æ–∑–¥–∞—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥ –∫ –∫—É—Ä—Å—É üç™")
    async def get_courses_query_for_create_promo_code(message):
        if not str(message.from_user.id) in [ELENA_CHAT_ID, SERGEY_CHAT_ID]:
            await bot.send_message(message.chat.id, "–≠—Ç–æ —á–∞—Å—Ç–Ω—ã–π –±–æ—Ç. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –≤–ª–∞–¥–µ–ª—å—Ü—É.")
        else:
            async with aiohttp.ClientSession() as session:
                async with session.get(
                        f'{API_URL_PREFIX}{API_URL_FOR_GET_COURSES_QUERY}',
                    params={"API_KEY_VER_G": API_KEY_VER_G}
                ) as response:
                    if response.status == 200:
                        response_data = await response.json()

                        markup = InlineKeyboardMarkup()
                        for course in response_data:
                            markup.add(InlineKeyboardButton(
                                text=f"{course['id']} {course['title']}",
                                callback_data=f"create_promo_for_{course['id']}_{course['slug']}"))

                        await bot.send_message(message.chat.id,
                                               "–°–ø–∏—Å–æ–∫ –∫—É—Ä—Å–æ–≤ –ø–æ–ª—É—á–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, "
                                               "–≤—ã–±–µ—Ä–∏—Ç–µ –∫—É—Ä—Å –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–∞.",
                                               reply_markup=markup)
                    else:
                        await bot.send_message(message.chat.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∫—É—Ä—Å–æ–≤.")

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ—Å–ª–µ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É —Å –∫—É—Ä—Å–æ–º
    @bot.callback_query_handler(func=lambda call: call.data.startswith('create_promo_for_'))
    async def create_promo_for_course(call):
        if not str(call.from_user.id) in [ELENA_CHAT_ID, SERGEY_CHAT_ID]:
            await bot.send_message(call.chat.id, "–≠—Ç–æ —á–∞—Å—Ç–Ω—ã–π –±–æ—Ç. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –≤–ª–∞–¥–µ–ª—å—Ü—É.")
        else:
            course_pk = call.data.split("_")[-2]
            course_slug = call.data.split("_")[-1]
            markup = InlineKeyboardMarkup()
            markup.add(InlineKeyboardButton("5%",
                                            callback_data=f"continue_create_promo_for_{course_pk}"
                                                          f"_sale_5"))
            markup.add(InlineKeyboardButton("25%",
                                            callback_data=f"continue_create_promo_for_{course_pk}"
                                                          f"_sale_25"))
            markup.add(InlineKeyboardButton("50%",
                                            callback_data=f"continue_create_promo_for_{course_pk}"
                                                          f"_sale_50"))
            markup.add(InlineKeyboardButton("100%",
                                            callback_data=f"continue_create_promo_for_{course_pk}"
                                                          f"_sale_100"))
            await bot.send_message(chat_id=call.message.chat.id,
                                   text=f"–í—ã–±–µ—Ä–∏ —Ä–∞–∑–º–µ—Ä —Å–∫–∏–¥–∫–∏ –¥–ª—è –∫—É—Ä—Å–∞ {course_slug}",
                                   reply_markup=markup)
            await bot.delete_message(call.message.chat.id, call.message.message_id)


    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ—Å–ª–µ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É —Å —Ä–∞–∑–º–µ—Ä–æ–º —Å–∫–∏–¥–∫–∏
    @bot.callback_query_handler(func=lambda call: call.data.startswith('continue_create_promo_for_'))
    async def continue_create_promo(call):
        if not str(call.from_user.id) in [ELENA_CHAT_ID, SERGEY_CHAT_ID]:
            await bot.send_message(call.chat.id, "–≠—Ç–æ —á–∞—Å—Ç–Ω—ã–π –±–æ—Ç. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –≤–ª–∞–¥–µ–ª—å—Ü—É.")
        else:
            sale_value = call.data.split("_")[-1]
            course_pk = call.data.split("_")[-3]
            markup = InlineKeyboardMarkup()
            markup.add(InlineKeyboardButton(text="1 –ú–µ—Å—è—Ü",
                                            callback_data=f"ending_create_promo_for_{course_pk}"
                                                          f"_sale_{sale_value}_period_1"))
            markup.add(InlineKeyboardButton(text="2 –ú–µ—Å—è—Ü–∞",
                                            callback_data=f"ending_create_promo_for_{course_pk}"
                                                          f"_sale_{sale_value}_period_2"))
            markup.add(InlineKeyboardButton(text="–ë–µ—Å—Å—Ä–æ—á–Ω–æ",
                                            callback_data=f"ending_create_promo_for_{course_pk}"
                                                          f"_sale_{sale_value}_period_infinitely"))
            await bot.send_message(chat_id=call.message.chat.id,
                                   text=f"–í—ã–±–µ—Ä–∏ —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–∞",
                                   reply_markup=markup)
            await bot.delete_message(call.message.chat.id, call.message.message_id)

    # –í—ã–±–æ—Ä —Å—Ä–æ–∫–∞ –¥–µ–π—Å—Ç–≤–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–∞ –∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–∞
    @bot.callback_query_handler(func=lambda call: call.data.startswith('ending_create_promo_for_'))
    async def ending_create_promo_code(call):
        if not str(call.from_user.id) in [ELENA_CHAT_ID, SERGEY_CHAT_ID]:
            await bot.send_message(call.chat.id, "–≠—Ç–æ —á–∞—Å—Ç–Ω—ã–π –±–æ—Ç. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –≤–ª–∞–¥–µ–ª—å—Ü—É.")
        else:
            sale_value = call.data.split("_")[-3]
            course_pk = call.data.split("_")[-5]
            period = call.data.split("_")[-1]

            if period != "infinitely":
                validity_period = ((datetime.now() + timedelta(days=int(period) * 30))).strftime('%Y-%m-%d')
            else:
                validity_period = None

            # –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ api
            async with aiohttp.ClientSession(trust_env=True) as session:
                json_data = {
                    "course_pk": course_pk,
                    "sale_value": sale_value,
                    "validity_period": validity_period,
                    "API_KEY_VER_G": API_KEY_VER_G
                }
                async with session.post(url=f"{API_URL_PREFIX}{API_URL_FOR_CREATE_PROMO_FOR_COURSE}",
                                        json=json_data, headers={'Content-Type': 'application/json'},
                                        allow_redirects=False) as response:
                    if response.status == 201:
                        response_data = await response.json()

                        new_promo_code = {
                            "sale": response_data['sale_value'],
                            "course_title": response_data["course_title"],
                            "course_absolute_url": response_data["course_absolute_url"],
                            "code": response_data["code"]
                        }

                        period = response_data['validity_period']

                        if period:
                            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É –≤ –Ω—É–∂–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
                            validity_period_str = f'–¥–æ {format_data(period)}–≥.'
                        else:
                            validity_period_str = '–ë–µ—Å—Å—Ä–æ—á–Ω—ã–π'

                        new_promo_code["period"] = validity_period

                        text = (f'–°–∫–∏–¥–∫–∞: {new_promo_code["sale"]}%\n'
                                f'–ö—É—Ä—Å: [{new_promo_code["course_title"]}]'
                                f'(https://ver-g.ru{new_promo_code["course_absolute_url"]})\n\n'
                                f'–ö–æ–¥: `{new_promo_code["code"]}`\n'
                                f'–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è: {validity_period_str}')

                        await bot.send_message(chat_id=call.message.chat.id,
                                               text=text, parse_mode='markdown')

                        await bot.delete_message(call.message.chat.id, call.message.message_id)

    # –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥ üîç"
    @bot.message_handler(func=lambda message: message.text == "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥ üîç")
    async def check_promo_message(message):
        if not str(message.from_user.id) in [ELENA_CHAT_ID, SERGEY_CHAT_ID]:
            await bot.send_message(message.chat.id, "–≠—Ç–æ —á–∞—Å—Ç–Ω—ã–π –±–æ—Ç. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –≤–ª–∞–¥–µ–ª—å—Ü—É.")
        else:
            await bot.send_message(message.chat.id, "–î–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–º–æ–∫–æ–¥–∞ –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å –µ–≥–æ –º–Ω–µ, –Ω–æ –ø–µ—Ä–µ–¥"
                                                 " –ø—Ä–æ–º–æ–∫–æ–¥–æ–º –¥–æ–ø–∏—à–∏ '*–ü—Ä–æ–º–æ*'. –î–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø—Ä–∏–º–µ—Ä–Ω–æ –≤–æ—Ç —Ç–∞–∫: \n"
                                                 "'–ü—Ä–æ–º–æQFvUv1NQ' –≥–¥–µ 'QFvUv1NQ' - —ç—Ç–æ –ø—Ä–æ–º–æ–∫–æ–¥.",
                                   parse_mode='markdown')

    # –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–∞. –û–∂–∏–¥–∞–µ—Ç—Å—è —Å—Ç—Ä–æ–∫–∞, –Ω–∞—á–∏–Ω–∞—é—â–∞—è—Å—è —Å '–ü—Ä–æ–º–æ'
    @bot.message_handler(func=lambda message: message.text.startswith('–ü—Ä–æ–º–æ'))
    async def check_promo_code(message):
        if not str(message.from_user.id) in [ELENA_CHAT_ID, SERGEY_CHAT_ID]:
            await bot.send_message(message.chat.id, "–≠—Ç–æ —á–∞—Å—Ç–Ω—ã–π –±–æ—Ç. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –≤–ª–∞–¥–µ–ª—å—Ü—É.")
        else:
            if len(message.text) != 13:
                await bot.send_message(message.chat.id, "üö´\n"
                                                        "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –ø—Ä–æ–º–æ–∫–æ–¥–∞. –ü—Ä–æ–º–æ–∫–æ–¥ –¥–æ–ª–∂–µ–Ω "
                                                        "—Å–æ—Å—Ç–æ—è—Ç—å –∏–∑ 8 —Å–∏–º–≤–æ–ª–æ–≤. –ü–µ—Ä–µ–¥ –ø—Ä–æ–º–æ–∫–æ–¥–æ–º "
                                                        "–¥–æ–ø–∏—à–∏ '*–ü—Ä–æ–º–æ*'",
                                       parse_mode='markdown')
            else:
                promo_code = message.text[5:13]

                async with aiohttp.ClientSession() as session:
                    json_data = {
                        "API_KEY_VER_G": API_KEY_VER_G,
                        "code": promo_code
                    }
                    url = f"{API_URL_PREFIX}{API_URL_FOR_CHECK_PROMO_FOR_COURSE}"
                    async with session.post(url, json=json_data, headers={'Content-Type': 'application/json'},
                                        allow_redirects=False) as response:
                        if response.status == 404:
                            await bot.send_message(message.chat.id,
                                                   "–ü—Ä–æ–º–æ–∫–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω.üôÖ‚Äç‚ôÇÔ∏è")
                        elif response.status == 200:
                            response_data = await response.json()

                            new_promo_code = {
                                "sale": response_data['sale_value'],
                                "course_title": response_data["course_title"],
                                "course_absolute_url": response_data["course_absolute_url"],
                                "code": response_data["code"]
                            }

                            period = response_data['validity_period']

                            if period:
                                # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É –≤ –Ω—É–∂–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
                                validity_period_str = f'–¥–æ {format_data(period)}–≥.'
                            else:
                                validity_period_str = '–ë–µ—Å—Å—Ä–æ—á–Ω—ã–π'

                            new_promo_code["period"] = validity_period_str

                            text = (f'‚úÖ\n'
                                    f'–°–∫–∏–¥–∫–∞: {new_promo_code["sale"]}%\n'
                                    f'–ö—É—Ä—Å: [{new_promo_code["course_title"]}]'
                                    f'(https://ver-g.ru{new_promo_code["course_absolute_url"]})\n\n'
                                    f'–ö–æ–¥: `{new_promo_code["code"]}`\n'
                                    f'–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è: {validity_period_str}')

                            await bot.send_message(chat_id=message.chat.id,
                                                   text=text, parse_mode='markdown')

    # –æ–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∞–π—Ç–∞üìà"
    @bot.message_handler(func=lambda message: message.text == "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∞–π—Ç–∞üìà")
    async def get_education_platform_report(message):
        if not str(message.from_user.id) in [ELENA_CHAT_ID, SERGEY_CHAT_ID]:
            await bot.send_message(message.chat.id, "–≠—Ç–æ —á–∞—Å—Ç–Ω—ã–π –±–æ—Ç. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –≤–ª–∞–¥–µ–ª—å—Ü—É.")
        else:
            async with aiohttp.ClientSession() as session:
                url = f"{API_URL_PREFIX}{API_URL_FOR_GET_REPORT_EDUCATION_PLATFORM}"
                try:
                    async with session.get(url=url, params={"API_KEY_VER_G": API_KEY_VER_G}) as response:
                        if response.status == 200:
                            response_data = await response.json()

                            text = (f"*–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∞–π—Ç–∞.*üîçüìä\n\n"
                                    f"*–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏*üôç‚Äç‚ôÄÔ∏èüôé‚Äç‚ôÇÔ∏èüôÜ‚Äç‚ôÇÔ∏èüôÜ‚Äç‚ôÄÔ∏è\n"
                                    f"–í—Å–µ–≥–æ: {response_data['total_users_number']}üôãüèª‚Äç‚ôÇÔ∏è\n"
                                    f"–ù–æ–≤—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏: {response_data['last_12_hours_registrations']}üÜï\n\n"
                                    f"*–ö—É—Ä—Å—ã*üìñüìöüìò\n"
                                    f"–í—Å–µ–≥–æ –∫—É—Ä—Å–æ–≤: {response_data['total_courses_number']}üìö\n"
                                    f"–û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã—Ö: {response_data['total_published_courses_number']}ü´£\n"
                                    f"–ü–ª–∞—Ç–Ω—ã–µ: {response_data['total_paid_courses_number']}ü´∞ü´∞\n"
                                    f"–ë–µ—Å–ø–ª–∞—Ç–Ω—ã–µ: {response_data['total_free_courses_number']}üéÅ")
                            await bot.send_message(chat_id=message.chat.id,
                                                   text=text,
                                                   parse_mode='markdown')


                            await bot.delete_message(message.chat.id, message.message_id)
                        else:
                            error_message = f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {response.status}"
                            await bot.send_message(message.chat.id, error_message)
                except aiohttp.ClientError as e:
                    error_message = f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞: {e}"
                    await bot.send_message(message.chat.id, error_message)
                except Exception as e:
                    error_message = f"–ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}"
                    await bot.send_message(message.chat.id, error_message)



    # –£–¥–∞–ª–µ–Ω–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –¥–ª—è —Å—Ç–∞—Ç—å–∏. –°–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç –∏–∑ comments.tasks.py
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É "–£–¥–∞–ª–∏—Ç—å"
    @bot.callback_query_handler(func=lambda call: call.data.startswith('confirm_delete_comment_'))
    async def confirm_delete_comment_callback(call):
        # –ò–∑–≤–ª–µ–∫–∞–µ–º pk –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –∏–∑ callback_data
        comment_id = call.data.split('_')[-1]


        # –°–æ–∑–¥–∞–µ–º –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º
        markup = InlineKeyboardMarkup()
        yes_button = InlineKeyboardButton(text="–î–∞", callback_data=f"delete_comment_{comment_id}")
        no_button = InlineKeyboardButton(text="–ù–µ—Ç", callback_data="cancel_delete")
        markup.add(yes_button, no_button)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º
        await bot.send_message(
            chat_id=call.message.chat.id,
            text="–¢–æ—á–Ω–æ —É–¥–∞–ª–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π?",
            reply_markup=markup
        )

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É "–î–∞"
    @bot.callback_query_handler(func=lambda call: call.data.startswith('delete_comment_'))
    async def delete_comment_callback(call):

        # –ò–∑–≤–ª–µ–∫–∞–µ–º pk –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –∏–∑ callback_data
        comment_id = call.data.split('_')[-1]

        # id –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
        tele_id = str(call.from_user.id)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è —á–µ—Ä–µ–∑ API
        async with aiohttp.ClientSession() as session:
            url = f'{API_URL_PREFIX}{API_URL_FOR_DELETE_COMMENT_FOR_ARTICLE}'
            json_data = {
                "API_KEY_VER_G": API_KEY_VER_G,
                "comment_id": comment_id
            }
            async with session.delete(
                    url=url, params=json_data, allow_redirects=False
            ) as response:


                if response.status == 200:
                    response_data = await response.json()
                    if 'success' in response_data:
                        # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∫–ª—é—á–∞ –∏–∑ redis (–æ–Ω —Ç—É–¥–∞ –∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç—Å—è –≤ –º–æ–º–µ–Ω—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏
                        # —Å–æ–æ–±—â–µ–Ω–∏—è –≤ comments.tasks.send_telegram_message)
                        message_id_in_bytes = redis_connect.get(f"comment_message_id_{comment_id}")
                        message_id = int(message_id_in_bytes)
                        if message_id:
                            # —É–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–º –∏–∑ —á–∞—Ç–∞
                            await bot.delete_message(call.message.chat.id, message_id)
                            # —É–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ —á–∞—Ç–∞
                            await bot.delete_message(call.message.chat.id, call.message.message_id)
                            await redis_connect.delete(f"comment_message_id_{comment_id}")
                            await bot.answer_callback_query(call.id, text="–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —É–¥–∞–ª–µ–Ω")
                            await bot.send_message(call.message.chat.id, response_data['success'])
                        else:
                            await bot.send_message(call.message.chat.id, "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –≤ –∫—ç—à–µ. –í–µ—Ä–æ—è—Ç–Ω–æ, –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –æ—Å—Ç–∞–≤–ª–µ–Ω"
                                                                   " –±–æ–ª–µ–µ –¥–≤—É—Ö –¥–Ω–µ–π –Ω–∞–∑–∞–¥.")
                            await bot.delete_message(call.message.chat.id, call.message.message_id)

                    elif 'error' in response_data:
                        await bot.answer_callback_query(call.id, text="–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è")
                        await bot.send_message(call.message.chat.id, response_data['error'])
                        await bot.delete_message(call.message.chat.id, call.message.message_id)
                else:
                    await bot.answer_callback_query(call.id, text="–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è")
                    await bot.send_message(call.message.chat.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è")

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É "–ù–µ—Ç"
    @bot.callback_query_handler(func=lambda call: call.data == "cancel_delete")
    async def cancel_delete_callback(call):
        await bot.delete_message(call.message.chat.id, call.message.message_id)
        await bot.answer_callback_query(call.id, text="–£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ")


# –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
register_handlers(bot)

async def main():
    await bot.infinity_polling()

# –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
if __name__ == "__main__":
    asyncio.run(main())